#include "assimpmodel.h"

#include "../instances/instanceholder.h"
#include "../util/logger.h"

#include <assimp/Importer.hpp>
#include <assimp/postprocess.h>
#include <cstddef>
#include <stdexcept>
#include <string>
#include <utility>

#include <iostream>

namespace leopph::impl
{
	AssimpModelImpl::AssimpModelImpl(std::filesystem::path path) :
		m_Path{ std::move(path) }
	{
		Assimp::Importer importer;
		const aiScene* scene{ importer.ReadFile(m_Path.string(), aiProcess_JoinIdenticalVertices | aiProcess_MakeLeftHanded | aiProcess_Triangulate | aiProcess_GenNormals | aiProcess_SplitLargeMeshes | aiProcess_ImproveCacheLocality | aiProcess_RemoveRedundantMaterials | aiProcess_FixInfacingNormals | aiProcess_OptimizeMeshes | aiProcess_OptimizeGraph | aiProcess_FlipUVs)};

		if (scene == nullptr || scene->mFlags & AI_SCENE_FLAGS_INCOMPLETE || scene->mRootNode == nullptr)
		{
			const auto errorMsg{ std::string{"Assimp error: "} + importer.GetErrorString() };
			Logger::Instance().Error(errorMsg);
			throw std::invalid_argument{ errorMsg };
		}

		m_Directory = m_Path.parent_path();

		ProcessNode(scene->mRootNode, scene);
	}



	bool AssimpModelImpl::operator==(const AssimpModelImpl& other) const
	{
		return this->m_Directory == other.m_Directory;
	}



	void AssimpModelImpl::Draw(const Shader& shader) const
	{
		for (const auto & mesh : m_Meshes)
			mesh.Draw(shader);
	}



	const std::filesystem::path& AssimpModelImpl::Path() const
	{
		return m_Path;
	}




	void AssimpModelImpl::ProcessNode(aiNode* node, const aiScene* scene)
	{
		// process all the meshes from current node
		for (unsigned i = 0; i < node->mNumMeshes; i++)
			m_Meshes.push_back(ProcessMesh(scene->mMeshes[node->mMeshes[i]], scene));

		// recursively process child nodes
		for (unsigned i = 0; i < node->mNumChildren; i++)
			ProcessNode(node->mChildren[i], scene);
	}



	Mesh AssimpModelImpl::ProcessMesh(aiMesh* mesh, const aiScene* scene)
	{
		std::vector<Vertex> vertices;
		std::vector<unsigned> indices;

		for (unsigned i = 0; i < mesh->mNumVertices; i++)
		{
			Vertex vertex;

			vertex.position = { mesh->mVertices[i].x, mesh->mVertices[i].y, mesh->mVertices[i].z };
			
			// if normals are missing, they are generated by Assimp
			vertex.normal = { mesh->mNormals[i].x, mesh->mNormals[i].y, mesh->mNormals[i].z };

			// ONLY 1 UV LAYER SUPPORTED
			vertex.textureCoordinates = { 0.0f, 0.0f };
			for (std::size_t j = 0; j < AI_MAX_NUMBER_OF_TEXTURECOORDS; j++)
				if (mesh->HasTextureCoords(static_cast<unsigned>(j)))
				{
					vertex.textureCoordinates = { mesh->mTextureCoords[j][i].x, mesh->mTextureCoords[j][i].y };
					break;
				}
					
			vertices.push_back(vertex);
		}

		for (unsigned i = 0; i < mesh->mNumFaces; i++)
			for (unsigned j = 0; j < mesh->mFaces[i].mNumIndices; j++)
				indices.push_back(mesh->mFaces[i].mIndices[j]);


		aiMaterial* assimpMaterial{ scene->mMaterials[mesh->mMaterialIndex] };

		Material material;

		material.m_DiffuseTexture = LoadTexturesByType(assimpMaterial, aiTextureType_DIFFUSE);
		material.m_SpecularTexture = LoadTexturesByType(assimpMaterial, aiTextureType_SPECULAR);

		return Mesh(vertices, indices, std::move(material));
	}



	std::unique_ptr<Texture> AssimpModelImpl::LoadTexturesByType(aiMaterial* material, aiTextureType assimpType)
	{
		if (material->GetTextureCount(assimpType) > 0)
		{
			aiString location;
			material->GetTexture(assimpType, 0, &location);

			if (InstanceHolder::IsTextureStored(m_Directory / location.C_Str()))
			{
				Logger::Instance().Debug("Texture on path [" + (m_Directory / location.C_Str()).string() + "] requested from cache.");
				return InstanceHolder::GetTexture(m_Directory / location.C_Str());
			}

			Logger::Instance().Debug("Texture on path [" + (m_Directory / location.C_Str()).string() + "] loaded from disk.");
			return std::make_unique<Texture>(m_Directory / location.C_Str());
		}

		Logger::Instance().Debug("Mesh contains no texture of the requested type.");
		return nullptr;
	}
}